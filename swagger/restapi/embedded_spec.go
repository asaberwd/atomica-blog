// Code generated by go-swagger; DO NOT EDIT.

package restapi

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
)

var (
	// SwaggerJSON embedded version of the swagger document used at generation time
	SwaggerJSON json.RawMessage
	// FlatSwaggerJSON embedded flattened version of the swagger document used at generation time
	FlatSwaggerJSON json.RawMessage
)

func init() {
	SwaggerJSON = json.RawMessage([]byte(`{
  "schemes": [
    "https",
    "http"
  ],
  "swagger": "2.0",
  "info": {
    "title": "Atomica Blogspot",
    "version": "1.0.0"
  },
  "basePath": "/v1",
  "paths": {
    "/api-docs": {
      "get": {
        "security": [],
        "produces": [
          "text/html"
        ],
        "tags": [
          "doc"
        ],
        "summary": "Get swagger documentation",
        "operationId": "getDoc",
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/health": {
      "get": {
        "security": [],
        "produces": [
          "application/json"
        ],
        "tags": [
          "health_api"
        ],
        "summary": "Get Atomica BlogPost API Health Status",
        "operationId": "healthCheck",
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/health"
            },
            "headers": {
              "X-REQUEST-ID": {
                "type": "string",
                "description": "Request ID"
              }
            }
          },
          "400": {
            "$ref": "#/responses/invalid-request"
          },
          "404": {
            "$ref": "#/responses/not-found"
          },
          "503": {
            "description": "Service is Unavailable",
            "schema": {
              "$ref": "#/definitions/health"
            }
          }
        }
      }
    },
    "/post/{postId}": {
      "get": {
        "security": [],
        "description": "Returns a single post by its id",
        "produces": [
          "application/json"
        ],
        "tags": [
          "post"
        ],
        "summary": "Get post by ID",
        "operationId": "getPostById",
        "parameters": [
          {
            "type": "integer",
            "format": "int64",
            "description": "ID of post to return",
            "name": "postId",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/Post"
            }
          },
          "400": {
            "$ref": "#/responses/invalid-request"
          },
          "404": {
            "$ref": "#/responses/not-found"
          }
        }
      },
      "put": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "post"
        ],
        "summary": "Update an existing post",
        "operationId": "updatePost",
        "parameters": [
          {
            "type": "integer",
            "format": "int64",
            "description": "ID of post to return",
            "name": "postId",
            "in": "path",
            "required": true
          },
          {
            "name": "post",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/Post"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "Post not found"
          },
          "405": {
            "description": "Validation exception"
          }
        }
      },
      "delete": {
        "security": [],
        "produces": [
          "application/json"
        ],
        "tags": [
          "post"
        ],
        "summary": "Soft Delete a post",
        "operationId": "deletePost",
        "parameters": [
          {
            "type": "integer",
            "format": "int64",
            "description": "Post id to delete",
            "name": "postId",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "success"
          },
          "400": {
            "$ref": "#/responses/invalid-request"
          },
          "404": {
            "$ref": "#/responses/not-found"
          }
        }
      }
    },
    "/post/{postId}/comment/{commentId}": {
      "put": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "comment"
        ],
        "summary": "Update an existing comment",
        "operationId": "updatePostComment",
        "parameters": [
          {
            "type": "integer",
            "format": "int64",
            "description": "ID of post",
            "name": "postId",
            "in": "path",
            "required": true
          },
          {
            "type": "integer",
            "format": "int64",
            "description": "ID of post comment",
            "name": "commentId",
            "in": "path",
            "required": true
          },
          {
            "name": "comment",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/Comment"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "Post not found"
          },
          "405": {
            "description": "Validation exception"
          }
        }
      }
    },
    "/post/{postId}/comments": {
      "get": {
        "security": [],
        "description": "Returns a list of post comments by its id",
        "produces": [
          "application/json"
        ],
        "tags": [
          "comments"
        ],
        "summary": "Get post comments by ID",
        "operationId": "getPostCommentsById",
        "parameters": [
          {
            "type": "integer",
            "format": "int64",
            "description": "ID of post to return",
            "name": "postId",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/Comments"
            }
          },
          "400": {
            "$ref": "#/responses/invalid-request"
          },
          "404": {
            "$ref": "#/responses/not-found"
          }
        }
      },
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "comments"
        ],
        "summary": "Add a new comment to a post",
        "operationId": "addPostComment",
        "parameters": [
          {
            "type": "integer",
            "format": "int64",
            "description": "ID of post to return",
            "name": "postId",
            "in": "path",
            "required": true
          },
          {
            "name": "comment",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/Comment"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/Comment"
            }
          },
          "400": {
            "$ref": "#/responses/invalid-request"
          }
        }
      }
    },
    "/posts": {
      "get": {
        "security": [],
        "description": "It returns a list of posts",
        "produces": [
          "application/json"
        ],
        "tags": [
          "post"
        ],
        "summary": "Returns a list post",
        "operationId": "getPosts",
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/Posts"
            }
          },
          "400": {
            "$ref": "#/responses/invalid-request"
          },
          "404": {
            "$ref": "#/responses/not-found"
          }
        }
      },
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "post"
        ],
        "summary": "Add a new post to the blog",
        "operationId": "addPost",
        "parameters": [
          {
            "name": "post",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/Post"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/Post"
            }
          },
          "400": {
            "$ref": "#/responses/invalid-request"
          }
        }
      }
    }
  },
  "definitions": {
    "Comment": {
      "type": "object",
      "required": [
        "title",
        "content",
        "creator"
      ],
      "properties": {
        "content": {
          "type": "string",
          "example": "Mo salah is the king"
        },
        "creator": {
          "type": "string",
          "example": "Ahmed"
        },
        "id": {
          "type": "integer",
          "format": "int64"
        },
        "title": {
          "type": "string",
          "example": "Great Game!"
        }
      }
    },
    "Comments": {
      "type": "array",
      "items": {
        "$ref": "#/definitions/Comment"
      }
    },
    "Post": {
      "type": "object",
      "required": [
        "title",
        "photoUrls",
        "content"
      ],
      "properties": {
        "content": {
          "type": "string",
          "example": "Liverpool acheived astonishing win"
        },
        "id": {
          "type": "integer",
          "format": "int64"
        },
        "photoUrls": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "status": {
          "description": "post status in the blog",
          "type": "string",
          "enum": [
            "published",
            "deleted"
          ]
        },
        "tags": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "title": {
          "type": "string",
          "example": "Liverpool achieved astonishing win"
        }
      }
    },
    "Posts": {
      "type": "object",
      "properties": {
        "posts": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Post"
          }
        }
      }
    },
    "error": {
      "description": "Standard error format",
      "type": "object",
      "title": "Error Response",
      "properties": {
        "code": {
          "type": "string"
        },
        "message": {
          "type": "string"
        }
      }
    },
    "health": {
      "type": "object",
      "title": "Health",
      "properties": {
        "healthy": {
          "description": "The overall status of the service",
          "type": "boolean"
        },
        "timeStamp": {
          "description": "The date/time string timestamp for the health query response",
          "type": "string"
        }
      }
    }
  },
  "responses": {
    "invalid-request": {
      "description": "Invalid request",
      "schema": {
        "$ref": "#/definitions/error"
      }
    },
    "not-found": {
      "description": "Not found.",
      "schema": {
        "$ref": "#/definitions/error"
      }
    }
  },
  "securityDefinitions": {
    "api_key": {
      "type": "apiKey",
      "name": "api_key",
      "in": "header"
    },
    "petstore_auth": {
      "type": "oauth2",
      "flow": "implicit",
      "authorizationUrl": "http://petstore.swagger.io/oauth/dialog",
      "scopes": {
        "read:pets": "read your pets",
        "write:pets": "modify pets in your account"
      }
    }
  },
  "tags": [
    {
      "description": "Post details",
      "name": "post",
      "externalDocs": {
        "description": "Find out more",
        "url": "http://swagger.io"
      }
    },
    {
      "description": "Post comments",
      "name": "comments"
    }
  ]
}`))
	FlatSwaggerJSON = json.RawMessage([]byte(`{
  "schemes": [
    "https",
    "http"
  ],
  "swagger": "2.0",
  "info": {
    "title": "Atomica Blogspot",
    "version": "1.0.0"
  },
  "basePath": "/v1",
  "paths": {
    "/api-docs": {
      "get": {
        "security": [],
        "produces": [
          "text/html"
        ],
        "tags": [
          "doc"
        ],
        "summary": "Get swagger documentation",
        "operationId": "getDoc",
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/health": {
      "get": {
        "security": [],
        "produces": [
          "application/json"
        ],
        "tags": [
          "health_api"
        ],
        "summary": "Get Atomica BlogPost API Health Status",
        "operationId": "healthCheck",
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/health"
            },
            "headers": {
              "X-REQUEST-ID": {
                "type": "string",
                "description": "Request ID"
              }
            }
          },
          "400": {
            "description": "Invalid request",
            "schema": {
              "$ref": "#/definitions/error"
            }
          },
          "404": {
            "description": "Not found.",
            "schema": {
              "$ref": "#/definitions/error"
            }
          },
          "503": {
            "description": "Service is Unavailable",
            "schema": {
              "$ref": "#/definitions/health"
            }
          }
        }
      }
    },
    "/post/{postId}": {
      "get": {
        "security": [],
        "description": "Returns a single post by its id",
        "produces": [
          "application/json"
        ],
        "tags": [
          "post"
        ],
        "summary": "Get post by ID",
        "operationId": "getPostById",
        "parameters": [
          {
            "type": "integer",
            "format": "int64",
            "description": "ID of post to return",
            "name": "postId",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/Post"
            }
          },
          "400": {
            "description": "Invalid request",
            "schema": {
              "$ref": "#/definitions/error"
            }
          },
          "404": {
            "description": "Not found.",
            "schema": {
              "$ref": "#/definitions/error"
            }
          }
        }
      },
      "put": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "post"
        ],
        "summary": "Update an existing post",
        "operationId": "updatePost",
        "parameters": [
          {
            "type": "integer",
            "format": "int64",
            "description": "ID of post to return",
            "name": "postId",
            "in": "path",
            "required": true
          },
          {
            "name": "post",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/Post"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "Post not found"
          },
          "405": {
            "description": "Validation exception"
          }
        }
      },
      "delete": {
        "security": [],
        "produces": [
          "application/json"
        ],
        "tags": [
          "post"
        ],
        "summary": "Soft Delete a post",
        "operationId": "deletePost",
        "parameters": [
          {
            "type": "integer",
            "format": "int64",
            "description": "Post id to delete",
            "name": "postId",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "success"
          },
          "400": {
            "description": "Invalid request",
            "schema": {
              "$ref": "#/definitions/error"
            }
          },
          "404": {
            "description": "Not found.",
            "schema": {
              "$ref": "#/definitions/error"
            }
          }
        }
      }
    },
    "/post/{postId}/comment/{commentId}": {
      "put": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "comment"
        ],
        "summary": "Update an existing comment",
        "operationId": "updatePostComment",
        "parameters": [
          {
            "type": "integer",
            "format": "int64",
            "description": "ID of post",
            "name": "postId",
            "in": "path",
            "required": true
          },
          {
            "type": "integer",
            "format": "int64",
            "description": "ID of post comment",
            "name": "commentId",
            "in": "path",
            "required": true
          },
          {
            "name": "comment",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/Comment"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "Post not found"
          },
          "405": {
            "description": "Validation exception"
          }
        }
      }
    },
    "/post/{postId}/comments": {
      "get": {
        "security": [],
        "description": "Returns a list of post comments by its id",
        "produces": [
          "application/json"
        ],
        "tags": [
          "comments"
        ],
        "summary": "Get post comments by ID",
        "operationId": "getPostCommentsById",
        "parameters": [
          {
            "type": "integer",
            "format": "int64",
            "description": "ID of post to return",
            "name": "postId",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/Comments"
            }
          },
          "400": {
            "description": "Invalid request",
            "schema": {
              "$ref": "#/definitions/error"
            }
          },
          "404": {
            "description": "Not found.",
            "schema": {
              "$ref": "#/definitions/error"
            }
          }
        }
      },
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "comments"
        ],
        "summary": "Add a new comment to a post",
        "operationId": "addPostComment",
        "parameters": [
          {
            "type": "integer",
            "format": "int64",
            "description": "ID of post to return",
            "name": "postId",
            "in": "path",
            "required": true
          },
          {
            "name": "comment",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/Comment"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/Comment"
            }
          },
          "400": {
            "description": "Invalid request",
            "schema": {
              "$ref": "#/definitions/error"
            }
          }
        }
      }
    },
    "/posts": {
      "get": {
        "security": [],
        "description": "It returns a list of posts",
        "produces": [
          "application/json"
        ],
        "tags": [
          "post"
        ],
        "summary": "Returns a list post",
        "operationId": "getPosts",
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/Posts"
            }
          },
          "400": {
            "description": "Invalid request",
            "schema": {
              "$ref": "#/definitions/error"
            }
          },
          "404": {
            "description": "Not found.",
            "schema": {
              "$ref": "#/definitions/error"
            }
          }
        }
      },
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "post"
        ],
        "summary": "Add a new post to the blog",
        "operationId": "addPost",
        "parameters": [
          {
            "name": "post",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/Post"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/Post"
            }
          },
          "400": {
            "description": "Invalid request",
            "schema": {
              "$ref": "#/definitions/error"
            }
          }
        }
      }
    }
  },
  "definitions": {
    "Comment": {
      "type": "object",
      "required": [
        "title",
        "content",
        "creator"
      ],
      "properties": {
        "content": {
          "type": "string",
          "example": "Mo salah is the king"
        },
        "creator": {
          "type": "string",
          "example": "Ahmed"
        },
        "id": {
          "type": "integer",
          "format": "int64"
        },
        "title": {
          "type": "string",
          "example": "Great Game!"
        }
      }
    },
    "Comments": {
      "type": "array",
      "items": {
        "$ref": "#/definitions/Comment"
      }
    },
    "Post": {
      "type": "object",
      "required": [
        "title",
        "photoUrls",
        "content"
      ],
      "properties": {
        "content": {
          "type": "string",
          "example": "Liverpool acheived astonishing win"
        },
        "id": {
          "type": "integer",
          "format": "int64"
        },
        "photoUrls": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "status": {
          "description": "post status in the blog",
          "type": "string",
          "enum": [
            "published",
            "deleted"
          ]
        },
        "tags": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "title": {
          "type": "string",
          "example": "Liverpool achieved astonishing win"
        }
      }
    },
    "Posts": {
      "type": "object",
      "properties": {
        "posts": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Post"
          }
        }
      }
    },
    "error": {
      "description": "Standard error format",
      "type": "object",
      "title": "Error Response",
      "properties": {
        "code": {
          "type": "string"
        },
        "message": {
          "type": "string"
        }
      }
    },
    "health": {
      "type": "object",
      "title": "Health",
      "properties": {
        "healthy": {
          "description": "The overall status of the service",
          "type": "boolean"
        },
        "timeStamp": {
          "description": "The date/time string timestamp for the health query response",
          "type": "string"
        }
      }
    }
  },
  "responses": {
    "invalid-request": {
      "description": "Invalid request",
      "schema": {
        "$ref": "#/definitions/error"
      }
    },
    "not-found": {
      "description": "Not found.",
      "schema": {
        "$ref": "#/definitions/error"
      }
    }
  },
  "securityDefinitions": {
    "api_key": {
      "type": "apiKey",
      "name": "api_key",
      "in": "header"
    },
    "petstore_auth": {
      "type": "oauth2",
      "flow": "implicit",
      "authorizationUrl": "http://petstore.swagger.io/oauth/dialog",
      "scopes": {
        "read:pets": "read your pets",
        "write:pets": "modify pets in your account"
      }
    }
  },
  "tags": [
    {
      "description": "Post details",
      "name": "post",
      "externalDocs": {
        "description": "Find out more",
        "url": "http://swagger.io"
      }
    },
    {
      "description": "Post comments",
      "name": "comments"
    }
  ]
}`))
}
