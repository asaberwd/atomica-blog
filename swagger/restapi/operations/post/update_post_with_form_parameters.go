// Code generated by go-swagger; DO NOT EDIT.

package post

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/runtime/middleware"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// UpdatePostWithFormMaxParseMemory sets the maximum size in bytes for
// the multipart form parser for this operation.
//
// The default value is 32 MB.
// The multipart parser stores up to this + 10MB.
var UpdatePostWithFormMaxParseMemory int64 = 32 << 20

// NewUpdatePostWithFormParams creates a new UpdatePostWithFormParams object
//
// There are no default values defined in the spec.
func NewUpdatePostWithFormParams() UpdatePostWithFormParams {

	return UpdatePostWithFormParams{}
}

// UpdatePostWithFormParams contains all the bound params for the update post with form operation
// typically these are obtained from a http.Request
//
// swagger:parameters updatePostWithForm
type UpdatePostWithFormParams struct {

	// HTTP Request Object
	HTTPRequest *http.Request `json:"-"`

	/*Updated name of the post
	  In: formData
	*/
	Name *string
	/*ID of post that needs to be updated
	  Required: true
	  In: path
	*/
	PostID int64
	/*Updated status of the post
	  In: formData
	*/
	Status *string
}

// BindRequest both binds and validates a request, it assumes that complex things implement a Validatable(strfmt.Registry) error interface
// for simple values it will use straight method calls.
//
// To ensure default values, the struct must have been initialized with NewUpdatePostWithFormParams() beforehand.
func (o *UpdatePostWithFormParams) BindRequest(r *http.Request, route *middleware.MatchedRoute) error {
	var res []error

	o.HTTPRequest = r

	if err := r.ParseMultipartForm(UpdatePostWithFormMaxParseMemory); err != nil {
		if err != http.ErrNotMultipart {
			return errors.New(400, "%v", err)
		} else if err := r.ParseForm(); err != nil {
			return errors.New(400, "%v", err)
		}
	}
	fds := runtime.Values(r.Form)

	fdName, fdhkName, _ := fds.GetOK("name")
	if err := o.bindName(fdName, fdhkName, route.Formats); err != nil {
		res = append(res, err)
	}

	rPostID, rhkPostID, _ := route.Params.GetOK("postId")
	if err := o.bindPostID(rPostID, rhkPostID, route.Formats); err != nil {
		res = append(res, err)
	}

	fdStatus, fdhkStatus, _ := fds.GetOK("status")
	if err := o.bindStatus(fdStatus, fdhkStatus, route.Formats); err != nil {
		res = append(res, err)
	}
	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// bindName binds and validates parameter Name from formData.
func (o *UpdatePostWithFormParams) bindName(rawData []string, hasKey bool, formats strfmt.Registry) error {
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: false

	if raw == "" { // empty values pass all other validations
		return nil
	}
	o.Name = &raw

	return nil
}

// bindPostID binds and validates parameter PostID from path.
func (o *UpdatePostWithFormParams) bindPostID(rawData []string, hasKey bool, formats strfmt.Registry) error {
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: true
	// Parameter is provided by construction from the route

	value, err := swag.ConvertInt64(raw)
	if err != nil {
		return errors.InvalidType("postId", "path", "int64", raw)
	}
	o.PostID = value

	return nil
}

// bindStatus binds and validates parameter Status from formData.
func (o *UpdatePostWithFormParams) bindStatus(rawData []string, hasKey bool, formats strfmt.Registry) error {
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: false

	if raw == "" { // empty values pass all other validations
		return nil
	}
	o.Status = &raw

	return nil
}
