// Code generated by go-swagger; DO NOT EDIT.

package comments

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"

	models "github.com/asaberwd/atomica-blog/swagger/models"
)

// GetPostCommentsByIDOKCode is the HTTP code returned for type GetPostCommentsByIDOK
const GetPostCommentsByIDOKCode int = 200

/*GetPostCommentsByIDOK successful operation

swagger:response getPostCommentsByIdOK
*/
type GetPostCommentsByIDOK struct {

	/*
	  In: Body
	*/
	Payload models.Comments `json:"body,omitempty"`
}

// NewGetPostCommentsByIDOK creates GetPostCommentsByIDOK with default headers values
func NewGetPostCommentsByIDOK() *GetPostCommentsByIDOK {

	return &GetPostCommentsByIDOK{}
}

// WithPayload adds the payload to the get post comments by Id o k response
func (o *GetPostCommentsByIDOK) WithPayload(payload models.Comments) *GetPostCommentsByIDOK {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the get post comments by Id o k response
func (o *GetPostCommentsByIDOK) SetPayload(payload models.Comments) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *GetPostCommentsByIDOK) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(200)
	payload := o.Payload
	if payload == nil {
		// return empty array
		payload = models.Comments{}
	}

	if err := producer.Produce(rw, payload); err != nil {
		panic(err) // let the recovery middleware deal with this
	}
}

// GetPostCommentsByIDBadRequestCode is the HTTP code returned for type GetPostCommentsByIDBadRequest
const GetPostCommentsByIDBadRequestCode int = 400

/*GetPostCommentsByIDBadRequest Invalid request

swagger:response getPostCommentsByIdBadRequest
*/
type GetPostCommentsByIDBadRequest struct {

	/*
	  In: Body
	*/
	Payload *models.Error `json:"body,omitempty"`
}

// NewGetPostCommentsByIDBadRequest creates GetPostCommentsByIDBadRequest with default headers values
func NewGetPostCommentsByIDBadRequest() *GetPostCommentsByIDBadRequest {

	return &GetPostCommentsByIDBadRequest{}
}

// WithPayload adds the payload to the get post comments by Id bad request response
func (o *GetPostCommentsByIDBadRequest) WithPayload(payload *models.Error) *GetPostCommentsByIDBadRequest {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the get post comments by Id bad request response
func (o *GetPostCommentsByIDBadRequest) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *GetPostCommentsByIDBadRequest) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(400)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// GetPostCommentsByIDNotFoundCode is the HTTP code returned for type GetPostCommentsByIDNotFound
const GetPostCommentsByIDNotFoundCode int = 404

/*GetPostCommentsByIDNotFound Not found.

swagger:response getPostCommentsByIdNotFound
*/
type GetPostCommentsByIDNotFound struct {

	/*
	  In: Body
	*/
	Payload *models.Error `json:"body,omitempty"`
}

// NewGetPostCommentsByIDNotFound creates GetPostCommentsByIDNotFound with default headers values
func NewGetPostCommentsByIDNotFound() *GetPostCommentsByIDNotFound {

	return &GetPostCommentsByIDNotFound{}
}

// WithPayload adds the payload to the get post comments by Id not found response
func (o *GetPostCommentsByIDNotFound) WithPayload(payload *models.Error) *GetPostCommentsByIDNotFound {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the get post comments by Id not found response
func (o *GetPostCommentsByIDNotFound) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *GetPostCommentsByIDNotFound) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(404)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}
