// Code generated by go-swagger; DO NOT EDIT.

package comments

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"

	models "github.com/asaberwd/atomica-blog/swagger/models"
)

// AddPostCommentOKCode is the HTTP code returned for type AddPostCommentOK
const AddPostCommentOKCode int = 200

/*AddPostCommentOK successful operation

swagger:response addPostCommentOK
*/
type AddPostCommentOK struct {

	/*
	  In: Body
	*/
	Payload *models.Comment `json:"body,omitempty"`
}

// NewAddPostCommentOK creates AddPostCommentOK with default headers values
func NewAddPostCommentOK() *AddPostCommentOK {

	return &AddPostCommentOK{}
}

// WithPayload adds the payload to the add post comment o k response
func (o *AddPostCommentOK) WithPayload(payload *models.Comment) *AddPostCommentOK {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the add post comment o k response
func (o *AddPostCommentOK) SetPayload(payload *models.Comment) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *AddPostCommentOK) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(200)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// AddPostCommentBadRequestCode is the HTTP code returned for type AddPostCommentBadRequest
const AddPostCommentBadRequestCode int = 400

/*AddPostCommentBadRequest Invalid request

swagger:response addPostCommentBadRequest
*/
type AddPostCommentBadRequest struct {

	/*
	  In: Body
	*/
	Payload *models.Error `json:"body,omitempty"`
}

// NewAddPostCommentBadRequest creates AddPostCommentBadRequest with default headers values
func NewAddPostCommentBadRequest() *AddPostCommentBadRequest {

	return &AddPostCommentBadRequest{}
}

// WithPayload adds the payload to the add post comment bad request response
func (o *AddPostCommentBadRequest) WithPayload(payload *models.Error) *AddPostCommentBadRequest {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the add post comment bad request response
func (o *AddPostCommentBadRequest) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *AddPostCommentBadRequest) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(400)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}
