// Code generated by go-swagger; DO NOT EDIT.

package comment

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/runtime/middleware"
	"github.com/go-openapi/swag"

	strfmt "github.com/go-openapi/strfmt"

	models "github.com/asaberwd/atomica-blog/swagger/models"
)

// NewUpdatePostCommentParams creates a new UpdatePostCommentParams object
// no default values defined in spec.
func NewUpdatePostCommentParams() UpdatePostCommentParams {

	return UpdatePostCommentParams{}
}

// UpdatePostCommentParams contains all the bound params for the update post comment operation
// typically these are obtained from a http.Request
//
// swagger:parameters updatePostComment
type UpdatePostCommentParams struct {

	// HTTP Request Object
	HTTPRequest *http.Request `json:"-"`

	/*
	  In: body
	*/
	Comment *models.Comment
	/*ID of post comment
	  Required: true
	  In: path
	*/
	CommentID int64
	/*ID of post
	  Required: true
	  In: path
	*/
	PostID int64
}

// BindRequest both binds and validates a request, it assumes that complex things implement a Validatable(strfmt.Registry) error interface
// for simple values it will use straight method calls.
//
// To ensure default values, the struct must have been initialized with NewUpdatePostCommentParams() beforehand.
func (o *UpdatePostCommentParams) BindRequest(r *http.Request, route *middleware.MatchedRoute) error {
	var res []error

	o.HTTPRequest = r

	if runtime.HasBody(r) {
		defer r.Body.Close()
		var body models.Comment
		if err := route.Consumer.Consume(r.Body, &body); err != nil {
			res = append(res, errors.NewParseError("comment", "body", "", err))
		} else {
			// validate body object
			if err := body.Validate(route.Formats); err != nil {
				res = append(res, err)
			}

			if len(res) == 0 {
				o.Comment = &body
			}
		}
	}
	rCommentID, rhkCommentID, _ := route.Params.GetOK("commentId")
	if err := o.bindCommentID(rCommentID, rhkCommentID, route.Formats); err != nil {
		res = append(res, err)
	}

	rPostID, rhkPostID, _ := route.Params.GetOK("postId")
	if err := o.bindPostID(rPostID, rhkPostID, route.Formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// bindCommentID binds and validates parameter CommentID from path.
func (o *UpdatePostCommentParams) bindCommentID(rawData []string, hasKey bool, formats strfmt.Registry) error {
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: true
	// Parameter is provided by construction from the route

	value, err := swag.ConvertInt64(raw)
	if err != nil {
		return errors.InvalidType("commentId", "path", "int64", raw)
	}
	o.CommentID = value

	return nil
}

// bindPostID binds and validates parameter PostID from path.
func (o *UpdatePostCommentParams) bindPostID(rawData []string, hasKey bool, formats strfmt.Registry) error {
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: true
	// Parameter is provided by construction from the route

	value, err := swag.ConvertInt64(raw)
	if err != nil {
		return errors.InvalidType("postId", "path", "int64", raw)
	}
	o.PostID = value

	return nil
}
