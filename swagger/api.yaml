swagger: "2.0"
info:
  description: ""
  version: "1.0.0"
  title: "Atomica Blogspot"
basePath: "/v1"
tags:
  - name: "post"
    description: "Post details"
    externalDocs:
      description: "Find out more"
      url: "http://swagger.io"
  - name: "comments"
    description: "Post comments"
schemes:
  - "https"
  - "http"
paths:
  /api-docs:
    get:
      security: []
      summary: Get swagger documentation
      operationId: getDoc
      produces:
        - text/html
      responses:
        200:
          description: Success
      tags:
        - doc

  /health:
    get:
      security: []
      summary: Get Atomica BlogPost API Health Status
      operationId: healthCheck
      produces:
        - application/json
      responses:
        200:
          description: Success
          schema:
            $ref: '#/definitions/health'
          headers:
            X-REQUEST-ID:
              type: string
              description: Request ID
        400:
          $ref: "#/responses/invalid-request"
        404:
          $ref: "#/responses/not-found"
        503:
          description: 'Service is Unavailable'
          schema:
            $ref: '#/definitions/health'
      tags:
        - health_api

  /posts:
    get:
      tags:
        - "post"
      summary: "Returns a list post"
      description: "It returns a list of posts"
      operationId: "getPosts"
      produces:
        - "application/json"
      responses:
        "200":
          description: "successful operation"
          schema:
            $ref: "#/definitions/Posts"
        "400":
          $ref: '#/responses/invalid-request'
        "404":
          $ref: '#/responses/not-found'
      security: []
    post:
      tags:
        - "post"
      summary: "Add a new post to the blog"
      description: ""
      operationId: "addPost"
      consumes:
        - "application/json"
      produces:
        - "application/json"
      parameters:
        - in: body
          name: post
          schema:
            $ref: '#/definitions/Post'
      responses:
        "400":
          $ref: '#/responses/invalid-request'
        "200":
          description: "successful operation"
          schema:
            $ref: "#/definitions/Post"
  /post/{postId}:
    get:
      tags:
        - "post"
      summary: "Get post by ID"
      description: "Returns a single post by its id"
      operationId: "getPostById"
      produces:
        - "application/json"
      parameters:
        - name: "postId"
          in: "path"
          description: "ID of post to return"
          required: true
          type: "integer"
          format: "int64"
      responses:
        "200":
          description: "successful operation"
          schema:
            $ref: "#/definitions/Post"
        "400":
          $ref: '#/responses/invalid-request'
        "404":
          $ref: '#/responses/not-found'
      security: []
    put:
      tags:
        - "post"
      summary: "Update an existing post"
      description: ""
      operationId: "updatePost"
      consumes:
        - "application/json"
      produces:
        - "application/json"
      parameters:
        - name: "postId"
          in: "path"
          description: "ID of post to return"
          required: true
          type: "integer"
          format: "int64"
        - in: body
          name: post
          schema:
            $ref: '#/definitions/Post'
      responses:
        "400":
          description: "Invalid ID supplied"
        "404":
          description: "Post not found"
        "405":
          description: "Validation exception"
    delete:
      tags:
        - "post"
      summary: "Soft Delete a post"
      description: ""
      operationId: "deletePost"
      produces:
        - "application/json"
      parameters:
        - name: "postId"
          in: "path"
          description: "Post id to delete"
          required: true
          type: "integer"
          format: "int64"
      responses:
        "200":
          description: success
        "400":
          $ref: '#/responses/invalid-request'
        "404":
          $ref: '#/responses/not-found'
      security: []
  /post/{postId}/comments:
    get:
      tags:
        - "comments"
      summary: "Get post comments by ID"
      description: "Returns a list of post comments by its id"
      operationId: "getPostCommentsById"
      produces:
        - "application/json"
      parameters:
        - name: "postId"
          in: "path"
          description: "ID of post to return"
          required: true
          type: "integer"
          format: "int64"
      responses:
        "200":
          description: "successful operation"
          schema:
            $ref: "#/definitions/Comments"
        "400":
          $ref: '#/responses/invalid-request'
        "404":
          $ref: '#/responses/not-found'
      security: []
    post:
      tags:
        - "comments"
      summary: "Add a new comment to a post"
      description: ""
      operationId: "addPostComment"
      consumes:
        - "application/json"
      produces:
        - "application/json"
      parameters:
        - name: "postId"
          in: "path"
          description: "ID of post to return"
          required: true
          type: "integer"
          format: "int64"
        - in: body
          name: comment
          schema:
            $ref: '#/definitions/Comment'
      responses:
        "400":
          $ref: '#/responses/invalid-request'
        "200":
          description: "successful operation"
          schema:
            $ref: "#/definitions/Comment"
  /post/{postId}/comment/{commentId}:
    put:
      tags:
        - "comment"
      summary: "Update an existing comment"
      description: ""
      operationId: "updatePostComment"
      consumes:
        - "application/json"
      produces:
        - "application/json"
      parameters:
        - name: "postId"
          in: "path"
          description: "ID of post"
          required: true
          type: "integer"
          format: "int64"
        - name: "commentId"
          in: "path"
          description: "ID of post comment"
          required: true
          type: "integer"
          format: "int64"
        - in: body
          name: comment
          schema:
            $ref: '#/definitions/Comment'
      responses:
        "400":
          description: "Invalid ID supplied"
        "404":
          description: "Post not found"
        "405":
          description: "Validation exception"

securityDefinitions:
  petstore_auth:
    type: "oauth2"
    authorizationUrl: "http://petstore.swagger.io/oauth/dialog"
    flow: "implicit"
    scopes:
      write:pets: "modify pets in your account"
      read:pets: "read your pets"
  api_key:
    type: "apiKey"
    name: "api_key"
    in: "header"
definitions:
  Post:
    type: "object"
    required:
      - "title"
      - "photoUrls"
      - "content"
    properties:
      id:
        type: "integer"
        format: "int64"
      title:
        type: "string"
        example: "Liverpool achieved astonishing win"
      content:
        type: "string"
        example: "Liverpool acheived astonishing win"
      photoUrls:
        type: "array"
        items:
          type: "string"
      tags:
        type: "array"
        items:
          type: "string"
      status:
        type: "string"
        description: "post status in the blog"
        enum:
          - "published"
          - "deleted"
  Comment:
    type: "object"
    required:
      - "title"
      - "content"
      - "creator"
    properties:
      id:
        type: "integer"
        format: "int64"
      title:
        type: "string"
        example: "Great Game!"
      content:
        type: "string"
        example: "Mo salah is the king"
      creator:
        type: "string"
        example: "Ahmed"
  Posts:
    type: object
    properties:
      posts:
        type: array
        items:
          $ref: "#/definitions/Post"
  Comments:
    type: array
    items:
      $ref: "#/definitions/Comment"

  health:
    type: object
    title: Health
    properties:
      timeStamp:
        type: string
        description: The date/time string timestamp for the health query response
      healthy:
        type: boolean
        description: The overall status of the service
  error:
    type: object
    title: Error Response
    description: Standard error format
    properties:
      code:
        type: string
      message:
        type: string
responses:
  invalid-request:
    description: Invalid request
    schema:
      $ref: '#/definitions/error'
  not-found:
    description: Not found.
    schema:
      $ref: "#/definitions/error"
