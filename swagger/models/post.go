// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// Post post
// swagger:model Post
type Post struct {

	// content
	// Required: true
	Content *string `json:"content"`

	// id
	ID int64 `json:"id,omitempty"`

	// photo urls
	// Required: true
	PhotoUrls []string `json:"photoUrls"`

	// post status in the blog
	// Enum: [published deleted]
	Status string `json:"status,omitempty"`

	// tags
	Tags []string `json:"tags"`

	// title
	// Required: true
	Title *string `json:"title"`
}

// Validate validates this post
func (m *Post) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateContent(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePhotoUrls(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStatus(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTitle(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Post) validateContent(formats strfmt.Registry) error {

	if err := validate.Required("content", "body", m.Content); err != nil {
		return err
	}

	return nil
}

func (m *Post) validatePhotoUrls(formats strfmt.Registry) error {

	if err := validate.Required("photoUrls", "body", m.PhotoUrls); err != nil {
		return err
	}

	return nil
}

var postTypeStatusPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["published","deleted"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		postTypeStatusPropEnum = append(postTypeStatusPropEnum, v)
	}
}

const (

	// PostStatusPublished captures enum value "published"
	PostStatusPublished string = "published"

	// PostStatusDeleted captures enum value "deleted"
	PostStatusDeleted string = "deleted"
)

// prop value enum
func (m *Post) validateStatusEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, postTypeStatusPropEnum); err != nil {
		return err
	}
	return nil
}

func (m *Post) validateStatus(formats strfmt.Registry) error {

	if swag.IsZero(m.Status) { // not required
		return nil
	}

	// value enum
	if err := m.validateStatusEnum("status", "body", m.Status); err != nil {
		return err
	}

	return nil
}

func (m *Post) validateTitle(formats strfmt.Registry) error {

	if err := validate.Required("title", "body", m.Title); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *Post) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Post) UnmarshalBinary(b []byte) error {
	var res Post
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
